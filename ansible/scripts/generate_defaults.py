"""
This generates default/main.yml files from the corresponding meta/argument_specs.yml files to avoid duplicated or
conflicting default values.

Inspired by https://github.com/nkakouros-original/ansible-role-easyrsa/blob/master/meta/generate_defaults.py.
"""

import os
import os.path
from pathlib import Path
from typing import Any

import yaml

SPEC_FILE_NAME = "argument_specs.yml"


class YamlDumper(yaml.Dumper):
    """Required to get indent expected by ansible-lint."""

    def increase_indent(self, flow: bool = False, *_: Any, **__: Any) -> None:
        super().increase_indent(flow=flow, indentless=False)


def main() -> None:
    root_path = Path(__file__).absolute().parents[2]
    for path in _get_directories(root_path):
        generate_defaults(root_path, path, Path(__file__).relative_to(root_path))


def generate_defaults(root_path: Path, base_path: Path, script_path: Path) -> None:
    specs_path = base_path / "meta" / SPEC_FILE_NAME
    defaults_dir = base_path / "defaults"
    defaults_path = defaults_dir / "main.yml"
    print(
        f"Generating defaults for {specs_path.relative_to(root_path)} and writing them to {defaults_path.relative_to(root_path)}..."
    )

    with open(specs_path) as f:
        specs = yaml.safe_load(f)
    if defaults := _collect_defaults(specs):
        Path(defaults_dir).mkdir(exist_ok=True)
        with open(defaults_path, "w") as f:
            f.write(
                "# DO NOT EDIT THIS FILE BY HAND\n"
                f"# This file is automatically generated by the script {script_path}\n"
                f"# from the argument specification at {specs_path.relative_to(root_path)}.\n"
                "# To update this file, run `poetry run generate_defaults` in the repository's root directory.\n\n",
            )
            yaml.dump(defaults, f, Dumper=YamlDumper)
    else:
        try:
            os.remove(defaults_path)
            os.rmdir(defaults_dir)
        except (FileNotFoundError, OSError):
            pass


def _get_directories(base_path: Path) -> list[Path]:
    directories = []
    for dirpath, _, filenames in os.walk(base_path / "ansible"):
        if SPEC_FILE_NAME in filenames:
            directories.append(Path(dirpath).parent)

    return directories


def _collect_defaults(specs: dict) -> dict:
    defaults = {}
    for argument, spec in specs["argument_specs"]["main"]["options"].items():
        if spec.get("required"):
            continue
        if (default := spec.get("default")) is not None:
            defaults[argument] = default

    return defaults


if __name__ == "__main__":
    main()
