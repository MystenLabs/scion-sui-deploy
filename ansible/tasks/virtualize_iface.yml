---
# Virtualize the public interface on the host to create an interface for the EDGE.
#
# Returns:
#   br_interface:   The name of the interface to pass through to the EDGE.
# Triggers:
#   update-grup, reboot-host
#
- name: Enable kernel Intel IOMMU command-line parameters
  become: true
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT="((?:(?!{{ item }}).)*?)"$'
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 {{ item }}"'
    backup: true
    backrefs: true
  loop:
    - "intel_iommu=on"
    - "iommu=pt"
  notify:
    - update-grub
    - reboot-host

- name: Virtualize the public interface (timeout 120s)
  ansible.builtin.replace:
    path: "/sys/class/net/{{ public_iface }}/device/sriov_numvfs"
    regexp: "^0$"
    replace: "{{ num_vfs }}"
    unsafe_writes: true  # Require due to writing to a device file
  become: true
  # The write may break SSH connectivity, use async to keep the play alive.
  async: 120
  poll: 5

- name: Make the virtual function persistent
  vars:
    public_iface_pciid: "{{ ansible_facts[public_iface]['pciid'] }}"
  ansible.builtin.copy:
    dest: "/etc/udev/rules.d/{{ public_iface }}.rules"
    content: >
      ACTION=="add", SUBSYSTEM=="net", KERNELS=="{{ public_iface_pciid }}",
      ATTR{device/sriov_numvfs}="{{ num_vfs }}"
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
    # Use unsafe writes as ansible's atomic write approach does not work with device files.
    unsafe_writes: true
  become: true

- name: Update the list of interfaces facts to reflect the virtualized interface
  ansible.builtin.setup:
    gather_subset: ["!all", "!min", "interfaces"]

- name: Identify the newly created virtual function
  block:
    - name: Determine the parent interfaces of all present virtual functions
      ansible.builtin.stat:
        path: /sys/class/net/{{ item }}/device/physfn
        get_mime: false
        get_checksum: false
        get_attributes: true
      loop: "{{ ansible_facts['interfaces'] }}"
      register: __stat

    - name: Select the first virtual function of the public interface
      vars:
        public_iface_pciid: "{{ ansible_facts[public_iface]['pciid'] }}"
      ansible.builtin.set_fact:
        br_interface: >-
          {{ __stat['results'] | select_vfs_from_stat_result(public_iface_pciid) | sort | first }}
